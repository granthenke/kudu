// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
//
// Protobufs which are used in the Kudu backup process.
// Though these are similar to the kudu common protobufs,
// they are kept seperate so they can be optimized for
// the backup process specificially.
syntax = "proto3";
package kudu.backup;

option java_package = "org.apache.kudu.backup";

import "google/protobuf/wrappers.proto";

message TableMetadataPB {
    int64 fromMs = 1;
    int64 toMs = 2;
    string name = 3;
    int32 replicas = 4;
    repeated ColumnMetadataPB columns = 5;
    PartitionMetadataPB partitions = 6;
}

message ColumnMetadataPB {
    string name = 1;
    string type = 2;
    ColumnTypeAttributesMetadataPB typeAttributes = 3;
    bool isKey = 4;
    bool isNullable = 5;
    // Uses the StringValue wrapper so we can differententiate between "unset"
    // and a default value.
    google.protobuf.StringValue default = 6;
    string encoding = 7;
    string compression = 8;
    int32 blockSize = 9;
}

message ColumnTypeAttributesMetadataPB {
    int32 precision = 1;
    int32 scale = 2;
}

message PartitionMetadataPB {
    repeated HashPartitionMetadataPB hashPartitions = 1;
    RangePartitionMetadataPB rangePartitions = 2;
}

message HashPartitionMetadataPB {
    repeated string columns = 1;
    int32 numBuckets = 2;
    int32 seed = 3;
}

message RangePartitionMetadataPB {
    repeated string columns = 1;
    repeated RangeBoundsMetadataPB bounds = 2;
}

message RangeBoundsMetadataPB {
    repeated ColumnValueMetadataPB lowerBounds = 1;
    repeated ColumnValueMetadataPB upperBounds = 2;
}

message ColumnValueMetadataPB {
    string column = 1;
    string value = 2;
}